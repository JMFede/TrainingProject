apiVersion: apps/v1
kind: Deployment
metadata:
  name: angular-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: angular-frontend
  template:
    metadata:
      labels:
        app: angular-frontend
    spec:
      containers:
      - name: angular-frontend
        image: jmfede/angular-app:v1
        ports:
        - containerPort: 4200
---
apiVersion: v1
kind: Service
metadata:
  name: angular-frontend
spec:
  type: NodePort
  ports:
    - port: 4200  # Port exposed by the service
      targetPort: 4200  # Port your application listens on
      nodePort: 30000  # Optional: specific NodePort, or let Kubernetes allocate one
  selector:
    app: angular-frontend  # Label selector to match pods
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dotnet-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dotnet-backend
  template:
    metadata:
      labels:
        app: dotnet-backend
    spec:
      containers:
      - name: dotnet-backend
        image: jmfede/dotnet-api:v1
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: dotnet-backend
spec:
  selector:
    app: dotnet-backend
  ports:
  - protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sql-database
spec:
  serviceName: "sql"
  replicas: 1
  selector:
    matchLabels:
      app: sql-database
  template:
    metadata:
      labels:
        app: sql-database
    spec:
      containers:
      - name: sql-database
        image: jmfede/sql-db:v1
        ports:
        - containerPort: 1433
---
apiVersion: v1
kind: Service
metadata:
  name: sql
spec:
  selector:
    app: sql-database
  ports:
  - protocol: TCP
    port: 1433
    targetPort: 1433
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: sql-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard



